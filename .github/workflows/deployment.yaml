name: Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Select deployment environment
        required: true
        options:
          - test
          - prod
          - demo
      all_projects:
        description: Deploy all projects
        required: false
        default: 'false'
        type: boolean
      deploy_landing:
        description: Deploy Landing
        required: false
        default: 'false'
        type: boolean
      deploy_company:
        description: Deploy Company
        required: false
        default: 'false'
        type: boolean
      deploy_freelancer:
        description: Deploy Freelancer
        required: false
        default: 'false'
        type: boolean
      deploy_admin:
        description: Deploy Admin
        required: false
        default: 'false'
        type: boolean

jobs:
  check-branch-and-env:
    runs-on: ubuntu-latest
    outputs:
      error: ${{ steps.check-branch-and-env.outputs.error }}
    steps:
      - name: Check branch and env
        id: check-branch-and-env
        run: |
          if [[ ${{ github.ref }} != 'refs/heads/main' && ${{ inputs.environment }} == 'prod' ]]; then
            echo "error=true" >> $GITHUB_ENV
            echo "### WARNING!" >> $GITHUB_STEP_SUMMARY
            echo "You are deploying to production from a branch that is not main. Please make sure you know what you are doing." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "error=false" >> $GITHUB_ENV
          fi
      - name: Check selected projects
        id: check-selected-projects
        run: |
          if [[ ${{ github.event.inputs.deploy_landing }} == 'false' && ${{ github.event.inputs.deploy_company }} == 'false' && ${{ github.event.inputs.deploy_freelancer }} == 'false' && ${{ github.event.inputs.deploy_admin }} == 'false' && ${{ github.event.inputs.all_projects }} == 'false' ]]; then
            echo "No projects selected for deployment. Exiting."
            exit 1
          fi
      - name: Show project inputs
        run: |
          echo "### PROJECTS DEPLOY INFO :frog: :frog: :frog:" >> $GITHUB_STEP_SUMMARY
          if [[ ${{ github.event.inputs.all_projects }} == 'true' ]]; then
            echo ":octocat: Deploying all projects" >> $GITHUB_STEP_SUMMARY
            echo "Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo "Deploing projects:" >> $GITHUB_STEP_SUMMARY
          if [[ ${{ github.event.inputs.deploy_landing }} == 'true' ]]; then
            echo ":octocat: Landing;" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ ${{ github.event.inputs.deploy_company }} == 'true' ]]; then
              echo ":octocat: Company;" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ ${{ github.event.inputs.deploy_freelancer }} == 'true' ]]; then
              echo ":octocat: Freelancer;" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ ${{ github.event.inputs.deploy_admin }} == 'true' ]]; then
              echo ":octocat: Admin;" >> $GITHUB_STEP_SUMMARY
          fi

  build-and-push:
    needs: check-branch-and-env
    if: ${{ needs.check-branch-and-env.outputs.error != 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [landing, company, freelancer, admin]
      fail-fast: false
    permissions:
      contents: read
      packages: write
    env:
      LANDING: "${{ github.event.inputs.deploy_landing  || github.event.inputs.all_projects }}"
      COMPANY: "${{ github.event.inputs.deploy_company || github.event.inputs.all_projects }}"
      FREELANCER: "${{ github.event.inputs.deploy_freelancer || github.event.inputs.all_projects }}"
      ADMIN: "${{ github.event.inputs.deploy_admin || github.event.inputs.all_projects }}"

      NEXT_PUBLIC_BOT_TOKEN: "${{ secrets.NEXT_PUBLIC_BOT_TOKEN }}"
      NEXT_PUBLIC_EMAIL: "${{ vars.NEXT_PUBLIC_EMAIL }}"
      NEXT_PUBLIC_URL: "${{ vars.NEXT_PUBLIC_URL }}"
      NEXT_PUBLIC_PHONE: "${{ vars.NEXT_PUBLIC_PHONE }}"
      NEXT_PUBLIC_MODE: "${{ inputs.environment }}"

      TG_CHANNEL_ID: "${{ inputs.environment }}_NEXT_PUBLIC_TG_CHANNEL_ID"
      COMPANY_URL: "${{ inputs.environment }}_NEXT_PUBLIC_COMPANY_URL"
      FREELANCER_URL: "${{ inputs.environment }}_NEXT_PUBLIC_FREELANCER_URL"
      BOT_URL: "${{ inputs.environment }}_NEXT_PUBLIC_BOT_URL"
      TRANSAK_API_KEY: "${{ inputs.environment }}_NEXT_PUBLIC_TRANSAK_API_KEY"

    steps:
      - name: Prepare image tag
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME=ghcr.io/$REPO_NAME/${{ matrix.project }}:latest" >> $GITHUB_ENV
          echo "ghcr.io/$REPO_NAME/${{ matrix.project }}:latest" >> $GITHUB_STEP_SUMMARY
        shell: bash

      - name: Set envs for projects
        run: |
          echo "NEXT_PUBLIC_TG_CHANNEL_ID=${{ vars[env.TG_CHANNEL_ID] }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_COMPANY_URL=${{ vars[env.COMPANY_URL] }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_FREELANCER_URL=${{ vars[env.FREELANCER_URL] }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_BOT_URL=${{ vars[env.BOT_URL] }}" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_TRANSAK_API_KEY=${{ secrets[env.TRANSAK_API_KEY] }}" >> $GITHUB_ENV

      - name: Set deployment flag
        run: |
          LANDING=${{ env.LANDING == 'true' && matrix.project == 'landing' }}
          COMPANY=${{ env.COMPANY == 'true' && matrix.project == 'company' }}
          FREELANCER=${{ env.FREELANCER == 'true' && matrix.project == 'freelancer' }}
          ADMIN=${{ env.ADMIN == 'true' && matrix.project == 'admin' }}

          DEPLOY_THIS_PROJECT=$([[ $LANDING == 'true' || $COMPANY == 'true' || $FREELANCER == 'true' || $ADMIN == 'true' ]] && echo "true" || echo "false")
          echo "DEPLOY_THIS_PROJECT=$DEPLOY_THIS_PROJECT" >> $GITHUB_ENV

          if [[ $DEPLOY_THIS_PROJECT == 'true' ]]; then
            echo "Deploying :white_check_mark:" >> $GITHUB_STEP_SUMMARY
          else
            echo "Not deploying :x:" >> $GITHUB_STEP_SUMMARY
          fi

        shell: bash

      - name: Checkout
        if: ${{ env.DEPLOY_THIS_PROJECT == 'true' }}
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: ${{ env.DEPLOY_THIS_PROJECT == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Catch deps
        if: ${{ env.DEPLOY_THIS_PROJECT == 'true' }}
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
      - name: Install dependencies
        run: yarn install

      - name: Build NX project
        if: ${{ env.DEPLOY_THIS_PROJECT == 'true' }}
        run: npx nx build ${{ matrix.project }}

      - name: Login to GitHub Container Registry
        if: ${{ env.DEPLOY_THIS_PROJECT == 'true' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image to GitHub Container Registry
        if: ${{ env.DEPLOY_THIS_PROJECT == 'true' }}
        run: |
          for i in {1..4}; do
            docker build -t ${{ env.IMAGE_NAME }} -f ./apps/${{ matrix.project }}/Dockerfile . && break || sleep 10;
          done
          for i in {1..4}; do
            docker push ${{ env.IMAGE_NAME }} && break || sleep 10;
          done

  deploy:
    needs: build-and-push
    if: ${{ needs.check-branch-and-env.outputs.error != 'true' }}
    runs-on: ubuntu-latest
    env:
      LANDING: ${{ github.event.inputs.deploy_landing == 'true' || github.event.inputs.all_projects == 'true' }}
      COMPANY: ${{ github.event.inputs.deploy_company == 'true' || github.event.inputs.all_projects == 'true' }}
      FREELANCER: ${{ github.event.inputs.deploy_freelancer == 'true' || github.event.inputs.all_projects == 'true' }}
      ADMIN: ${{ github.event.inputs.deploy_admin == 'true' || github.event.inputs.all_projects == 'true' }}

      SSH_HOST_ENV: ${{ inputs.environment }}_SSH_HOST
      SSH_USERNAME_ENV: ${{ inputs.environment }}_SSH_USERNAME
      SSH_PRIVATE_KEY_ENV: ${{ inputs.environment }}_SSH_PRIVATE_KEY
      SSH_PASSPHRASE_ENV: ${{ inputs.environment }}_SSH_PASSPHRASE
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Transfer Docker image to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[env.SSH_HOST_ENV] }}
          username: ${{ secrets[env.SSH_USERNAME_ENV] }}
          key: ${{ secrets[env.SSH_PRIVATE_KEY_ENV] }}
          passphrase: ${{ secrets[env.SSH_PASSPHRASE_ENV] }}
          source: "compose.yaml"
          target: /mnt/freelbee/client

      - name: Set up SSH connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets[env.SSH_HOST_ENV] }}
          username: ${{ secrets[env.SSH_USERNAME_ENV] }}
          key: ${{ secrets[env.SSH_PRIVATE_KEY_ENV] }}
          passphrase: ${{ secrets[env.SSH_PASSPHRASE_ENV] }}
          script: |
            echo "Deploying ${{ inputs.environment }} environment"
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            cd /mnt/freelbee/client

            REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            IMAGE_NAME="ghcr.io/$REPO_NAME"

            COMPANY_IMAGE="${IMAGE_NAME}/company:latest"
            FREELANCER_IMAGE="${IMAGE_NAME}/freelancer:latest"
            ADMIN_IMAGE="${IMAGE_NAME}/admin:latest"
            LANDING_IMAGE="${IMAGE_NAME}/landing:latest"

            echo "company-image: $COMPANY_IMAGE"
            echo "freelancer-image: $FREELANCER_IMAGE"
            echo "admin-image: $ADMIN_IMAGE"
            echo "landing-image: $LANDING_IMAGE"

            SERVICES=""

            if [ "${{ env.COMPANY }}" == "true" ]; then
              if docker pull $COMPANY_IMAGE; then
                SERVICES="$SERVICES company"
              fi
            fi
            if [ "${{ env.FREELANCER }}" == "true" ]; then
              if docker pull $FREELANCER_IMAGE; then
                SERVICES="$SERVICES freelancer"
              fi
            fi
            if [ "${{ env.LANDING }}" == "true" ]; then
              if docker pull $LANDING_IMAGE; then
                SERVICES="$SERVICES landing"
              fi
            fi
            if [ "${{ env.ADMIN }}" == "true" ]; then
              if docker pull $ADMIN_IMAGE; then
                SERVICES="$SERVICES admin"
              fi
            fi

            echo "Deploying services: $SERVICES"

            if [ -n "$SERVICES" ]; then
              docker-compose -f compose.yaml up -d $SERVICES
            else
              echo "No services to deploy"
            fi
          shell: bash
